mov r7, 0   // r7 -> i 
loop1_1: mov r0, 0
add r0, r7
add r0, r7  // r0 = 2 r7(2i)
lw r1, r0   // r1 = (2i)    lsw
mov r2, 1
add r0, r2
lw r2, r0   // r2 = (2i + 1) msw

mov r0, 0
add r0, r1
mov r3, 0
mov r4, 0
mov r5, 0
mov r6, 0
xor r3, r0
xor r4, r0
csr r0, 1
xor r3, r0
xor r5, r0
csr r0, 1
xor r4, r0
xor r5, r0
csr r0, 1
xor r3, r0
xor r4, r0
xor r5, r0
csr r0, 1
xor r3, r0
xor r6, r0
csr r0, 1
xor r4, r0
xor r6, r0
csr r0, 1
xor r3, r0
xor r4, r0
xor r6, r0
csr r0, 1
xor r5, r0
xor r6, r0
mov r0, 0
add r0, r2
xor r3, r0
xor r5, r0
xor r6, r0
csr r0, 1
xor r4, r0
xor r5, r0
xor r6, r0
csr r0, 1
xor r3, r0
xor r4, r0
xor r5, r0
xor r6, r0
mov r0, 1
and r3, r0
and r4, r0
and r5, r0
and r6, r0
csl r3, 1
csl r4, 2
csl r5, 2
csl r5, 2
add r5, r4
add r5, r3 // r5 = 0 0 0 p4 0 p2 p1 0

mov r0, 1
and r0, r1  // b1
csl r0, 3
add r5, r0 // r5 = 0 0 0 p4 b1 p2 p1 0
mov r0, 2
and r0, r1  // b2
csl r0, 2
csl r0, 2
add r5, r0  // r5 = 0 0 b2 p4 b1 p2 p1 0
mov r0, 4
and r0, r1  // b3
csl r0, 2
csl r0, 2
add r5, r0  // r5 = 0 b3 b2 p4 b1 p2 p1 0
mov r0, 4
csl r0, 1
and r0, r1  // b4
csl r0, 2
csl r0, 2
add r5, r0  // r5 = b4 b3 b2 p4 b1 p2 p1 0

mov r0, 4
csl r0, 2
and r0, r1  // b5
csr r0, 3
add r6, r0  // r6 = 0 0 0 0 0 0 b5 p8
mov r0, 4
csl r0, 3
and r0, r1  // b6
csr r0, 3
add r6, r0  // r6 = 0 0 0 0 0 b6 b5 p8
mov r0, 1
csr r0, 2
and r0, r1  // b7
csr r0, 3
add r6, r0  // r6 = 0 0 0 0 b7 b6 b5 p8
mov r0, 1
csr r0, 1
and r0, r1  // b8
csr r0, 3
add r6, r0  // r6 = 0 0 0 b8 b7 b6 b5 p8
mov r0, 1
and r0, r2  // b9
csr r0, 3
add r6, r0  // r6 = 0 0 b9 b8 b7 b6 b5 p8
mov r0, 2
and r0, r2  // b10
csr r0, 3
add r6, r0  // r6 = 0 b10 b9 b8 b7 b6 b5 p8
mov r0, 4
and r0, r2  // b11
csr r0, 3
add r6, r0  // r6 = b11 b10 b9 b8 b7 b6 b5 p8

mov r3, 0
mov r0, 0
add r0, r5
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0

mov r0, 0
add r0, r6
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0
csr r0, 1
xor r3, r0

mov r0, 1
and r0, r3
add r5, r0

mov r0, 7
csl r0, 2
mov r1, 2
add r0, r1  // r0 = 30
add r0, r7
add r0, r7  // r0 = 30 + 2i
sw r5, r0
mov r1, 1
add r0, r1  // r0 = 31 + 2i
sw r6, r0
add r7, r1
mov r0, 7
csl r0, 1
add r0, r1
bne r0, r7
jump loop1_1

mov r7, 0               // program2 starts here
loop2_1: mov r0, 1
csr r0, 2               // r0 = 64
add r0, r7
add r0, r7              // r0 = 64 + 2i
lw r1, r0               // r1 = (64 + 2i)
mov r2, 1
add r0, r2              // r0 = 65 + 2i
lw r2, r0               // r2 = (65 + 21)

mov r0, 0
add r0, r1 
mov r3, 0
mov r4, 0
mov r5, 0
mov r6, 0
csr r0, 3
xor r3, r0
xor r4, r0
csr r0, 2
xor r3, r0
xor r5, r0
csr r0, 1
xor r4, r0
xor r5, r0
csr r0, 1
xor r3, r0
xor r4, r0
xor r5, r0
mov r0, 0
add r0, r2
csr r0, 1
xor r3, r0
xor r6, r0
csr r0, 1
xor r4, r0
xor r6, r0
csr r0, 1
xor r3, r0
xor r4, r0
xor r6, r0
csr r0, 1
xor r5, r0
xor r6, r0
csr r0, 1
xor r3, r0
xor r5, r0
xor r6, r0
csr r0, 1
xor r4, r0
xor r5, r0
xor r6, r0
csr r0, 1
xor r3, r0
xor r4, r0
xor r5, r0
xor r6, r0
mov r0, 1
and r3, r0
and r4, r0
and r5, r0
and r6, r0
csl r4, 1
csl r5, 2
csl r6, 3
add r6, r5
add r6, r4
add r6, r3              // r6 = 0 0 0 0 p8 p4 p2 p1
mov r5, 0               // r5 = received
mov r0, 6
and r0, r1              // r0 = 0 0 0 0 0 p2 p1 0
csr r0, 1
add r5, r0              // r5 = 0 0 0 0 0 0 p2 p1
mov r0, 4
csl r0, 2
and r0, r1              // r0 = 0 0 0 p4  0 0 0 0
csr r0, 2
add r5, r0              // r5 = 0 0 0 0 0 p4 p2 p1
mov r0, 1
and r0, r2              // r0 = 0 0 0 0 0 0 0 p8
csl r0, 3
add r5, r0              // r5 = 0 0 0 0 p8 p4 p2 p1
mov r0, 0
add r0, r1
mov r4, 0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
mov r0, 0
add r0, r2
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0
csr r0, 1
xor r4, r0              // r4 = calculated p16
mov r3, 1
and r4, r3
and r3, r1              // r3 = received p16
xor r6, r5
mov r5, 0
bne r3, r4
jump 1_bit

mov r3, 0
bne r3, r6
jump 2_bit

mov r6, 0
mov r3, 1
bne r3, r5
jump write

2_bit: mov r6, 1
csr r6, 1
bne r6, r5
jump write

1_bit: mov r0, 0
mov r3, 1
mov r4, 1
1_bit_while: bne r0, r6
jump 1_bit_loop

mov r0, 4
csl r0, 1
and r0, r6

bne r0, r5              // if r0 == 0, use lsw
jump 1_bit_msw
xor r1, r3              // flip lsw
mov r6, 0
bne r4, r5
jump write

1_bit_msw: xor r2, r3   // flip msw
mov r6, 0
bne r4, r5
jump write

1_bit_loop: csl r3, 1
add r0, r4
bne r4, r5
jump 1_bit_while

write: mov r0, 4        // r0 r3 r4 free
csl r0, 1
and r0, r1
csr r0, 3
add r5, r0
mov r0, 7
csr r0, 3
and r0, r1
csr r0, 2
csr r0, 2
add r5, r0              // r5 = 0 0 0 0 b4 b3 b2 b1
mov r0, 7
csl r0, 1
mov r3, 1
add r0, r3
csl r0, 1
and r0, r2
csl r0, 3
add r5, r0              // r5 = b8 b7 b6 b5 b4 b3 b2 b1
mov r0, 7
csr r0, 3
and r0, r2
csl r0, 3
add r6, r0              // r6 = _ 0 0 0 0 b11 b10 b9
mov r0, 5
csl r0, 3
mov r1, 7
add r0, r1
csl r0, 1               // r0 = 94
add r0, r7
add r0, r7
sw r5, r0
mov r1, 1
add r0, r1
sw r6, r0
add r7, r1
mov r0, 7
csl r0, 1
add r0, r1              // r0 = 15
bne r7, r0
jump loop2_1

mov r3, 1               // program3 starts here
csr r3, 1	// r3 = 128
mov r4, 5
csr r4, 3	// r4 = 160
lw r2, r4
mov r5, 7
add r5, r3
csl r5, 1
add r5, r3
csl r5, 1	// r5=00011111
csr r2, 3
and r2, r5	// r2 &= r5
mov r6, 0

loop3_1_1: lw r1, r3	// r1 = mem[r3]
mov r7, 1
and r1, r5	
bne r1, r2	// if r1 != r2
jump else3_1_1
add r6, r7	// r6++

else3_1_1: lw r1, r3	// r1 = mem[r3]
csr r1, 1	
and r1, r5
bne r1, r2	// if r1 != r2
jump else3_1_2
add r6, r7	// r6++

else3_1_2: lw r1, r3	// r1 = mem[r3]
csr r1, 2
and r1, r5
bne r1, r2	// if r1 != r2
jump else3_1_3
add r6, r7	// r6++

else3_1_3: lw r1, r3	// r1 = mem[r3]
csr r1, 3
and r1, r5
bne r1, r2	// if r1 != r2
jump else3_1_4
add r6, r7	// r6++

else3_1_4: add r3, r7
bne r3, r4	// if r3 != r4
jump loop3_1_1
mov r7, 3	// r7 = 3
csr r7, 2	// r7 = 192
sw r6, r7

mov r3, 1
csr r3, 1	// r3 = 128
mov r6, 0	//r6 = 0
mov r7, 1

loop3_2_1: lw r1, r3	// r1 = mem[r3]
and r1, r5	
bne r1, r2	// if r1 != r2
jump else3_2_1
add r6, r7	// r6++
bne r3, r7
jump end3_2

else3_2_1: lw r1, r3	// r1 = mem[r3]
csr r1, 1
and r1, r5	
bne r1, r2	// if r1 != r2
jump else3_2_2
add r6, r7	// r6++
bne r3, r7
jump end3_2

else3_2_2: lw r1, r3	// r1 = mem[r3]
csr r1, 2
and r1, r5	
bne r1, r2	// if r1 != r2
jump else3_2_3
add r6, r7	// r6++
bne r3, r7
Jump end3_2

else3_2_3: lw r1, r3	// r1 = mem[r3]
csr r1, 3
and r1, r5	
bne r1, r2	// if r1 != r2
jump end3_2
add r6, r7	// r6++

end3_2: add r3, r7	// r3 = 129
bne r3, r4 	// if r3 != r4
jump loop3_2_1
mov r7, 7
csr r7, 2	// r7 = 193
sw r6, r7

mov r7, 3
csr r7, 2	// r7 = 192
lw r6, r7	// r6 = mem[r7]
mov r3, 3
mov r4, 7
csl r4, 2
add r4, r3
csl r4, 3
mov r3, 4
add r4, r3
mov r3, 1
csr r3, 1   // r3 = 128
csr r4, 3	// r4 = 159

loop3_3_1: mov r7, 1
lw r0, r3	// r0 = mem[r3]
csl r0, 2
csl r0, 2
mov r1, 7	// r1 = 7
csl r1, 1
add r1, r7	// r1 += r7
csl r1, 2
csl r1, 2
and r0, r1
csr r1, 2
csr r1, 2
add r3, r7	// r3 = 129
lw r7, r3	// r7 = mem[r3]
csr r7, 2
csr r7, 2
and r1, r7
add r1, r0
mov r0, 0
add r0, r1	// r0 = r1
and r1, r5
mov r7, 1
bne r1, r2	// if r1 != r2
jump else3_3_1
add r6, r7	// r6++

else3_3_1: mov r1, 0
add r1, r0	// r1 = r0
csr r1, 1
mov r0, 0
add r0, r1	// r0 = r1
and r1, r5
bne r1, r2	// if r1 != r2
jump else3_3_2
add r6, r7	// r6++

else3_3_2: mov r1, 0
add r1, r0	// r1 = r0
csr r1, 1
mov r0, 0
add r0, r1	// r0 = r1
and r1, r5
bne r1, r2	// if r1 != r2
jump else3_3_3
add r6, r7	// r6++

else3_3_3: mov r1, 0
add r1, r0	// r1 = r0
csr r1, 1
and r1, r5
bne r1, r2	// if r1 != r2
jump else3_3_4
add r6, r7	// r6++

else3_3_4: bne r3, r4	// if r3 != r4
jump loop3_3_1
mov r7, 3
csr r7, 2
mov r3, 2
add r7, r3	// r7 = 194
sw r6, r7
halt