//program 3
//R1 = data, R2 = pattern, R3 = 128, R4 = 160
//R5 = 00001111, R6 = count1, R7 = 192, 193, 194
MOV R3, 1 //R3 = 1
SLL R3, 1 //R3 = 10
SLL R3, 1 //R3 = 100
SLL R3, 1 //R3 = 1000
SLL R3, 1 //R3 = 10000
SLL R3, 1 //R3 = 100000
SLL R3, 1 //R3 = 1000000
SLL R3, 1 //R3 = 10000000 (128)
MOV R4, 1 //R4 = 1
SLL R4, 1 //R4 = 10
SLL R4, 1 //R4 = 100
INC R4 //R4 = 101
SLL R4, 1 //R4 = 1010
SLL R4, 1 //R4 = 10100
SLL R4, 1 //R4 = 101000
SLL R4, 1 //R4 = 1010000
SLL R4, 1 //R4 = 10100000 (160)
LD R2, R4 //R2 = Mem[160] (pattern) (ex: 00001101)
MOV R5, 1 //R5 = 1
SLL R5, 1 //R5 =10
INC R5 // R5 = 11
SLL R5, 1 //R5 =110
INC R5 //R5 = 111
SLL R5, 1 //R5 =1110
INC R5 // R5 = 1111
MOV R6, 0 //R6 = 0
LOOP3_1_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
AND R1, R5 //R1 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_1_1
INC R6 //R6++ (count+1)
ELSE3_1_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
AND R1, R5 //R1 = 00001101
BNE R1, R2 //if R1 != R2
JR ELSE3_1_2
INC R6 //R6++ (count+1)
ELSE3_1_2:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
AND R1, R5 //R1 = 00000110
BNE R1, R2 //if R1 != R2
JR ELSE3_1_3
INC R6 //R6++ (count+1)
ELSE3_1_3:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_1_4
INC R6 //R6++ (count+1)
ELSE3_1_4:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
SRL R1, 1 //R1 = 00001101
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_1_5
INC R6 //R6++ (count+1)
ELSE3_1_5:
INC R3 //R3++
BNE R3, R4 
JR LOOP3_1_1
MOV R7, 1 //R7 = 1
SLL R7, 1 //R7 = 10
INC R7 //R7 = 11
SLL R7, 1 //R7 = 110
SLL R7, 1 //R7 = 1100
SLL R7, 1 //R7 = 11000
SLL R7, 1 //R7 = 110000
SLL R7, 1 //R7 = 1100000
SLL R7, 1 //R7 = 11000000 (192)
SW R6, R7

//R1 = data, R2 = pattern, R3 = 128, R4 = 160
//R5 = 00001111, R6 = count2
MOV R3, 1 //R3 = 1
SLL R3, 1 //R3 = 10
SLL R3, 1 //R3 = 100
SLL R3, 1 //R3 = 1000
SLL R3, 1 //R3 = 10000
SLL R3, 1 //R3 = 100000
SLL R3, 1 //R3 = 1000000
SLL R3, 1 //R3 = 10000000 (128)
LD R2, R4 //R2 = Mem[160] (pattern) (ex: 00001101)
MOV R5, 1 //R5 = 1
SLL R5, 1 //R5 =10
INC R5 // R5 = 11
SLL R5, 1 //R5 =110
INC R5 //R5 = 111
SLL R5, 1 //R5 =1110
INC R5 // R5 = 1111
MOV R6, 0 //R6 = 0
LOOP3_2_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
AND R1, R5 //R1 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_2_1
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
AND R1, R5 //R1 = 00001101
BNE R1, R2 //if R1 != R2
JR ELSE3_2_2
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_2:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
AND R1, R5 //R1 = 00000110
BNE R1, R2 //if R1 != R2
JR ELSE3_2_3
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_3:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_2_4
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_4:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
SRL R1, 1 //R1 = 00001101
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_2_5
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_5:
END3_2:
INC R3 //R3++
BNE R3, R4 
JR LOOP3_2_1
INC R7 //(193)
SW R6, R7

//R0 = 1st data, R1 = combine data, R2 = pattern(0101), R3 = 128, R4 = 159
//R5 = 00001111, R6 = count3, R7 = 194
MOV R7, 1 //R7 = 1
SLL R7, 1 //R7 = 10
INC R7 //R7 = 11
SLL R7, 1 //R7 = 110
SLL R7, 1 //R7 = 1100
SLL R7, 1 //R7 = 11000
SLL R7, 1 //R7 = 110000
SLL R7, 1 //R7 = 1100000
SLL R7, 1 //R7 = 11000000 (192)
LD R6, R7 //R6 = Mem[192] = 96
MOV R3, 1 //R3 = 1
SLL R3, 1 //R3 = 10
SLL R3, 1 //R3 = 100
SLL R3, 1 //R3 = 1000
SLL R3, 1 //R3 = 10000
SLL R3, 1 //R3 = 100000
SLL R3, 1 //R3 = 1000000
SLL R3, 1 //R3 = 10000000 (128)
MOV R4, 1 //R4 = 1
SLL R4, 1 //R4 = 10
SLL R4, 1 //R4 = 100
SLL R4, 1 //R4 = 1000
INC R4 //R4 = 1001
SLL R4, 1 //R4 = 10010
INC R4 //R4 = 10011
SLL R4, 1 //R4 = 100110
INC R4 //R4 = 100111
SLL R4, 1 //R4 = 1001110
INC R4 //R4 = 1001111
SLL R4, 1 //R4 = 10011110 
INC R4 //R4 = 10011111 (159)
LOOP3_3_1:
LD R0, R3 //R0 = Mem[128] = 01010101
SRL R0, 1 //R0 = 00101010
SRL R0, 1 //R0 = 00010101
SRL R0, 1 //R0 = 00001010
SRL R0, 1 //R0 = 00000101
SRL R0, 1 //R0 = 00000010
MOV R1, 1 //R1 = 1
ADD R1, R3 //R1 = 129
LD R1, R1 //R1 = Mem[129] = 01010101
SLL R1, 1 //R1 = 10101010
SLL R1, 1 //R1 = 01010100
SLL R1, 1 //R1 = 10101000
ADD R1, R0 //R1 = 10101010
AND R1, R5 //R1 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_3_1
INC R6 //R6++ (count+1)
ELSE3_3_1:
SRL R0, 1 //R0 = 00000001
MOV R1, 1 //R1 = 1
ADD R1, R3 //R1 = 129
LD R1, R1 //R1 = Mem[129] = 01010101
SLL R1, 1 //R1 = 10101010
SLL R1, 1 //R1 = 01010100
ADD R1, R0 //R1 = 01010101
AND R1, R5 //R1 = 00000101
BNE R1, R2 //if R1 != R2
JR ELSE3_3_2
INC R6 //R6++ (count+1)
ELSE3_3_2:
SRL R0, 1 //R0 = 00000000
MOV R1, 1 //R1 = 1
ADD R1, R3 //R1 = 129
LD R1, R1 //R1 = Mem[129] = 01010101
SLL R1, 1 //R1 = 10101010
ADD R1, R0 //R1 = 10101010
AND R1, R5 //R5 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_3_3
INC R6 //R6++ (count+1)
ELSE3_3_3:
INC R3 //R3++
BNE R3, R4 
JR LOOP3_3_1
INC R7 //R7 = 193
INC R7 //R7 = 194
SW R6, R7
HALT