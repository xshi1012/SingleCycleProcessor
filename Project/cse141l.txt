//program 1
MOV R3, 1 // R3 = 1
SLL R3, 1 //R3 = 10
INC R3 // R3 = 11
SLL R3, 1 //R3 = 110
INC R3 // R3 = 111
SLL R3, 1 //R3 = 1110
INC R3 // R3 = 1111
SLL R3, 1 //R3 = 11110 = 30
MOV R4, 0 //R4 = 0
ADD R4, R3 //R4 = R4 + R3 = 0 + 11110 = 30
MOV R5, 0 // R5 = 0
LOOP1_1:
LD R1, R5 // R1= Mem[R5(0)] =  b8 b7 b6 b5 b4 b3   b2   b1 
MOV R6, 1 // R6 = 1
ADD R6, R5 // R6 = R5 + 1
LD R0, R6  //R0= Mem[R6(1)] =  0   0   0   0   0   b11 b10 b9  
SLL R0, 1 //R1 = 0 0 0 0 b11 b10 b9 0
SLL R0, 1 //R1 = 0 0 0 b11 b10 b9 0 0
SLL R0, 1 //R1 = 0 0 b11 b10 b9 0 0 0
SLL R0, 1 //R1 = 0 b11 b10 b9 0 0 0 0
SRL R1, 1 //R1 = 0 b8 b7 b6 b5 b4 b3 b2
SRL R1, 1 //R1 = 0 0 b8 b7 b6 b5 b4 b3
SRL R1, 1 //R1 = 0 0  0 b8 b7 b6 b5 b4
SRL R1, 1 //R1 = 0 0  0  0 b8 b7 b6 b5
XOR R1, R0 // R1 = R1 ^ R0 =   0 b11 b10 b9 b8 b7 b6 b5
MOV R7, 1 // R7 = 1
ADD R7, R3 // R7 = R3 + 1 = 31
SW R1, R7 // Mem[R6(31)] = R1 = 0 b11 b10 b9 b8 b7 b6 b5
// calculate p8 = ^ b11:b5
MOV R2, 1  // R2 = 1
MOV R6, 0  // R6 = 0
AND R2, R1 // R2 = b5
SRL R1, 1 // R1 = 0 0 b11 b10 b9 b8 b7 b6
MOV R7, 1 //R7 = 1
AND R7, R1 // R7 = b6
XOR R2, R7 // R2 = b5 ^ b6
SRL R1, 1 // R1 = 0 0 0 b11 b10 b9 b8 b7
MOV R7, 1 //R7 = 1
AND R7, R1 // R7 = b7
XOR R2, R7 //R2 = b5 ^ b6 ^ b7
SRL R1, 1 // R1 = 0 0 0 0 b11 b10 b9 b8
MOV R7, 1 //R7 = 1
AND R7, R1 // R7 = b8
XOR R2, R7 //R2 = b5 ^ b6 ^ b7 ^ b8
XOR R6, R7 //R6 = b8
SRL R1, 1 // R1 = 0 0 0 0 0 b11 b10 b9
MOV R7, 1 //R7 = 1
AND R7, R1 // R7 = b9
XOR R2, R7 //R2 = b5 ^ b6 ^ b7 ^ b8 ^ b9
XOR R6, R7 //R6 = b8 ^ b9
SRL R1, 1 // R1 = 0 0 0 0 0 0 b11 b10
MOV R7, 1 //R7 = 1
AND R7, R1 // R7 = b10
XOR R2, R7 //R2 = b5 ^ b6 ^ b7 ^ b8 ^ b9 ^ b10
XOR R6, R7 //R6 = b8 ^ b9 ^ b10
SRL R1, 1 // R1 = 0 0 0 0 0 0 0 b11
MOV R7, 1 //R7 = 1
AND R7, R1 // R7 = b11
XOR R2, R7 //R2 = b5 ^ b6 ^ b7 ^ b8 ^ b9 ^ b10 ^ b11 = p8
XOR R6, R7 //R6 = b8 ^ b9 ^ b10 ^ b11
LD R1, R5 // R1= Mem[R5(0)] =  b8 b7 b6 b5 b4 b3  b2  b1 
MOV R0, 1 // R0 = 1
AND R0, R1 // R0 = b1
SLL R0, 1 // R0 = b1 0
SLL R0, 1 // R0 = b1 0 0
SRL R1, 1 // R1 = 0 b8 b7 b6 b5 b4 b3  b2 
SLL R1, 1 // R1= b8 b7 b6 b5 b4 b3  b2 0
SLL R1, 1 // R1= b7 b6 b5 b4 b3  b2 0 0
SLL R1, 1 // R1= b6 b5 b4 b3  b2  0 0 0 
SLL R1, 1 // R1= b5 b4 b3  b2  0 0 0 0
SLL R1, 1 // R1= b4 b3  b2 0 0 0 0 0
SRL R1, 1 // R1 = 0 b4 b3 b2 0 0 0 0
XOR R1, R0 // R1 = R1 ^ R0 = 0 b4 b3 b2 0 b1 0 0
SLL R2, 1 // R2 = p8 0
SLL R2, 1 // R2 = p8 0 0
SLL R2, 1 // R2 = p8 0 0 0
SLL R2, 1 // R2 = p8 0 0 0 0
SLL R2, 1 // R2 = p8 0 0 0 0 0
SLL R2, 1 // R2 = p8 0 0 0 0 0 0
SLL R2, 1 // R2 = p8 0 0 0 0 0 0 0
XOR R1, R2 //R1 = R1 ^ R2 = p8 b4 b3 b2 0 b1 0 0
SW R1, R3 // Mem[30] = p8 b4 b3 b2 0 b1 0 0
//calculate p4 = ^(b11:b8,b4,b3,b2)
SRL R1, 1 // R1 = 0 p8 b4 b3 b2 0 b1 0
SRL R1, 1 // R1 = 0 0 p8 b4 b3 b2 0 b1
SRL R1, 1 // R1 = 0 0 0 p8 b4 b3 b2 0
SRL R1, 1 // R1 = 0 0 0 0 p8 b4 b3 b2
MOV R2, 1
AND R2, R1 //R2 = b2
XOR R6, R2 //R6 = b8 ^ b9 ^ b10 ^ b11 ^ b2
SRL R1, 1 // R1 = 0 0 0 0 0 p8 b4 b3
MOV R2, 1
AND R2, R1 //R2 = b3
XOR R6, R2 //R6 = b8 ^ b9 ^ b10 ^ b11 ^ b2 ^ b3
SRL R1, 1 // R1 = 0 0 0 0 0 p8 b4
MOV R2, 1
AND R2, R1 //R2 = b4
XOR R6, R2 //R6 = b8 ^ b9 ^ b10 ^ b11 ^ b2 ^ b3 ^ b4 = p4
SLL R6, 1 //R6 = p4 0
SLL R6, 1 //R6 = p4 0 0
SLL R6, 1 //R6 = p4 0 0 0
LD R1, R3 //R1 = Mem[30] = p8 b4 b3 b2 0 b1 0 0
XOR R1, R6 //R1 = p8 b4 b3 b2 p4 b1 0 0
SW R1, R3 // Mem[30] = p8 b4 b3 b2 p4 b1 0 0
//calculate p2 = ^(b11,b10,b7,b6,b4,b3,b1)
//calculate p1 = ^(b11,b9,b7,b5,b4,b2,b1)   
MOV R0, 1 //p1
MOV R2, 1 //p2
SRL R1, 1 // R1 = 0 p8 b4 b3 b2 p4 b1 0
SRL R1, 1 // R1 = 0 0 p8 b4 b3 b2 p4 b1
AND R0, R1//R0 = b1
AND R2, R1//R2 = b1
SRL R1, 1 // R1 = 0 0 0 p8 b4 b3 b2 p4
SRL R1, 1 // R1 = 0 0 0 0 p8 b4 b3 b2
MOV R6, 1
AND R6, R1 //R6 = b2
XOR R0, R6 //R0 = b1 ^ b2
SRL R1, 1 // R1 = 0 0 0 0 0 p8 b4 b3
MOV R6, 1
AND R6, R1 //R6 = b3
XOR R2, R6 //R2 = b1 ^ b3
SRL R1, 1 // R1 = 0 0 0 0 0 0 p8 b4
MOV R6, 1
AND R6, R1 //R6 = b4
XOR R0, R6 //R0 = b1 ^ b2 ^ b4
XOR R2, R6 //R2 = b1 ^ b3 ^ b4
MOV R7, 1 // R7 = 1
ADD R7, R3 // R7 = R3 + 1 = 31
LD R1, R7 // R1 = mem[31] = 0 b11 b10 b9 b8 b7 b6 b5
MOV R6, 1
AND R6, R1 //R6 = b5
XOR R0, R6 //R0 = b1 ^ b2 ^ b4 ^ b5
SRL R1, 1 //  R1 = 0 0 b11 b10 b9 b8 b7 b6
MOV R6, 1
AND R6, R1 //R6 = b6
XOR R2, R6 //R2 = b1 ^ b3 ^ b4 ^ b6
SRL R1, 1 //  R1 = 0 0 0 b11 b10 b9 b8 b7
MOV R6, 1
AND R6, R1 //R6 = b7
XOR R2, R6 //R2 = b1 ^ b3 ^ b4 ^ b6 ^ b7
XOR R0, R6 //R0 = b1 ^ b2 ^ b4 ^ b5 ^ b7
SRL R1, 1 //  R1 = 0 0 0 0 b11 b10 b9 b8
SRL R1, 1 //  R1 = 0 0 0 0 0 b11 b10 b9
MOV R6, 1
AND R6, R1 //R6 = b9
XOR R0, R6 //R0 = b1 ^ b2 ^ b4 ^ b5 ^ b7 ^ b9
SRL R1, 1 //  R1 = 0 0 0 0 0 0 b11 b10
MOV R6, 1
AND R6, R1 //R6 = b10
XOR R2, R6 //R2 = b1 ^ b3 ^ b4 ^ b6 ^ b7 ^ b10
SRL R1, 1 //  R1 = 0 0 0 0 0 0 0 b11
MOV R6, 1
AND R6, R1 //R6 = b11
XOR R0, R6 //R0 = b1 ^ b2 ^ b4 ^ b5 ^ b7 ^ b9 ^ b11 = p1
XOR R2, R6 //R2 = b1 ^ b3 ^ b4 ^ b6 ^ b7 ^ b10 ^ b11 = p2
SLL R2, 1 // R2 = p2 0
XOR R2, R0 //R2 = p2 p1
LD R1, R3 //R1 = Mem[30] = p8 b4 b3 b2 0 b1 0 0
XOR R1, R2 //  R1 = p8 b4 b3 b2 p4 b1 p2 p1
SW R1, R3 //R1 = Mem[30] = p8 b4 b3 b2 0 b1 p2 p1
MOV R6, 1 // R6 = 1
SLL R6, 1 //R6 = 1 0
ADD R5, R6 // R5 = R6 + 2  increment R5 by 2 = 2
ADD R3, R6 // R2 = R6 + 2  increment R3 by 2 = 32
BNE R5, R4
JR LOOP1_1

//program 2
MOV R0, 1 //R0 = 1
MOV R1, 1 //R1 = 1
SLL R0, 1 //R0 = 1 0
SLL R0, 1 //R0 = 1 0 0
ADD R1, R0 //R1 = 1 0 1
SLL R1, 1 //R1 = 1 0 1 0
INC R1 //R1 = 1 0 1 1
SLL R1, 1 //R1 = 1 0 1 1 0
INC R1 //R1 = 1 0 1 1 1
SLL R1, 1 //R1 = 1 0 1 1 1 0
INC R1 //R1 = 1 0 1 1 1 1
SLL R1, 1 //R1 = 1 0 1 1 1 1 0 = 94
MOV R2, 0 //R2 = 0
ADD R2, R1 //R2 = 1 0 1 1 1 0 = 94
SLL R0, 1 //R0 = 1 0 0 0
SLL R0, 1 //R0 = 1 0 0 0 0
SLL R0, 1 //R0 = 1 0 0 0 0 0
SLL R0, 1 //R0 = 1 0 0 0 0 0 0 = 64  //179 line
LOOP2_1:
MOV R3, 1 //R3 = 1
ADD R3, R0 //R3 = 65
LD R3, R3 //R3 = mem[R3(65)] = 0 b11 b10 b9 b8 b7 b6 b5
MOV R4, 1 //R4 = 1
AND R4, R3 //R4 = b5
SRL R3, 1 //R3 = 0 0 b11 b10 b9 b8 b7 b6
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b6
XOR R4, R5 //R4 = b5 ^ b6
SRL R3, 1 //R3 = 0 0 0 b11 b10 b9 b8 b7
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b6
XOR R4, R5 //R4 = b5 ^ b6 ^ b7
SRL R3, 1 //R3 = 0 0 0 0 b11 b10 b9 b8
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b8
XOR R4, R5 //R4 = b5 ^ b6 ^ b7 ^ b8
SRL R3, 1 //R3 = 0 0 0 0 0 b11 b10 b9
MOV R6, 1 //R6 = 1
AND R6, R3 //R6 = b9
XOR R5, R6 //R5 = b8 ^ b9
XOR R4, R6 //R4 = b5 ^ b6 ^ b7 ^ b8 ^ b9
SRL R3, 1 //R3 = 0 0 0 0 0 0 b11 b10
MOV R6, 1 //R6 = 1
AND R6, R3 //R6 = b10
XOR R5, R6 //R5 = b8 ^ b9 ^ b10
XOR R4, R6 //R4 = b5 ^ b6 ^ b7 ^ b8 ^ b9 ^ b10
SRL R3, 1 //R3 = 0 0 0 0 0 0 0 b11
MOV R6, 1 //R6 = 1
AND R6, R3 //R6 = b11
XOR R5, R6 //R5 = b8 ^ b9 ^ b10 ^ b11 =s4
XOR R4, R6 //R4 = b5 ^ b6 ^ b7 ^ b8 ^ b9 ^ b10 ^ b11 = s8
LD R3, R0 //R3 = mem[R0(64)] = p8 b4 b3  b2 p4 b1 p2 p1
SRL R3, 1 //R3 =  0 p8 b4  b3  b2 p4 b1 p2
SRL R3, 1 //R3 =  0 0 p8 b4   b3  b2 p4 b1
SRL R3, 1 //R3 =  0 0 0 p8 b4   b3  b2 p4
SRL R3, 1 //R3 =  0 0 0 0 p8 b4   b3  b2
SRL R3, 1 //R3 =  0 0 0 0 0 p8 b4   b3 
SRL R3, 1 //R3 =  0 0 0 0 0 0 p8 b4
SRL R3, 1 //R3 =  0 0 0 0 0 0 0 p8
XOR R4, R3 //R4 = s8 ^ p8
SLL R4, 1 //R4 = s8 ^ p8 0
SLL R4, 1 //R4 = s8 ^ p8 0 0
SLL R4, 1 //R4 = s8 ^ p8 0 0 0
LD R3, R0 //R3 = mem[R0(64)] = p8 b4 b3  b2 p4 b1 p2 p1
SRL R3, 1 //R3 =  0 p8 b4  b3  b2 p4 b1 p2
SRL R3, 1 //R3 =  0 0 p8 b4  b3  b2 p4 b1
SRL R3, 1 //R3 =  0 0 0 p8 b4  b3  b2 p4
MOV R7, 1 //R6 = 1
AND R7, R3 //R7 = p4
SRL R3, 1 //R3 =  0 0 0 0 p8 b4  b3  b2
MOV R6, 1 //R6 = 1
AND R6, R3 //R6 = b2
XOR R5, R6 //R5 = b8 ^ b9 ^ b10 ^ b11 ^ b2
SRL R3, 1 //R3 =  0 0 0 0 0 p8 b4  b3
MOV R6, 1 //R6 = 1
AND R6, R3 //R6 = b3
XOR R5, R6 //R5 = b8 ^ b9 ^ b10 ^ b11 ^ b2 ^ b3
SRL R3, 1 //R3 =  0 0 0 0 0 0 p8 b4
MOV R6, 1 //R6 = 1
AND R6, R3 //R6 = b4
XOR R5, R6 //R5 = b8 ^ b9 ^ b10 ^ b11 ^ b2 ^ b3 ^ b4 = s4
XOR R5, R7 //R5 = s4 ^ p4
SLL R5, 1 //R5 = s4 ^ p4 0
SLL R5, 1 //R5 = s4 ^ p4 0 0
XOR R4, R5 //R4 =  s8 ^ p8 s4 ^ p4 0 0
LD R3, R0 //R3 = mem[R0(64)] = p8 b4 b3  b2 p4 b1 p2 p1
SRL R3, 1 //R3 =  0 p8 b4  b3  b2 p4 b1 p2
SRL R3, 1 //R3 =  0 0 p8 b4  b3  b2 p4 b1
MOV R7, 1 //R7 = 1
MOV R6, 1 //R6 = 1
AND R7, R3 //R7 = b1
AND R6, R3 //R6 = b1
SRL R3, 1 //R3 =  0 0 0 p8 b4  b3  b2 p4
SRL R3, 1 //R3 =  0 0 0 0 p8 b4  b3  b2
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b2
XOR R6, R5 //R6 = b1 ^ b2
SRL R3, 1 //R3 =  0 0 0 0 0 p8 b4  b3
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b3
XOR R7, R5 //R7 = b1 ^ b3
SRL R3, 1 //R3 =  0 0 0 0 0 0 p8 b4
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b4
XOR R7, R5 //R7 = b1 ^ b3 ^ b4
XOR R6, R5 //R6 = b1 ^ b2 ^ b4
MOV R3, 1 //R3 = 1
ADD R3, R0 //R3 = 65
LD R3, R3 //R3 = mem[R3(65)] = 0 b11 b10 b9 b8 b7 b6 b5
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b5
XOR R6, R5 //R6 = b1 ^ b2 ^ b4 ^ b5
SRL R3, 1 //R3 = 0 0 b11 b10 b9 b8 b7 b6
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b6
XOR R7, R5 //R7 = b1 ^ b3 ^ b4 ^ b6
SRL R3, 1 //R3 = 0 0 0 b11 b10 b9 b8 b7
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b7
XOR R7, R5 //R7 = b1 ^ b3 ^ b4 ^ b6 ^ b7
XOR R6, R5 //R7 = b1 ^ b2 ^ b4 ^ b5 ^ b7
SRL R3, 1 //R3 = 0 0 0 0 b11 b10 b9 b8
SRL R3, 1 //R3 = 0 0 0 0 0 b11 b10 b9
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b9
XOR R6, R5 //R6 = b1 ^ b2 ^ b4 ^ b5 ^ b7 ^ b9
SRL R3, 1 //R3 = 0 0 0 0 0 0 b11 b10
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b10
XOR R7, R5 //R7 = b1 ^ b3 ^ b4 ^ b6 ^ b7 ^ b10
SRL R3, 1 //R3 = 0 0 0 0 0 0 0 b11
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = b10
XOR R6, R5 //R6 = b1 ^ b2 ^ b4 ^ b5 ^ b7 ^ b9 ^ b11 = s1
XOR R7, R5 //R7 = b1 ^ b3 ^ b4 ^ b6 ^ b7 ^ b10 ^ b11 = s2
LD R3, R0 //R3 = mem[R0(64)] = p8 b4 b3  b2 p4 b1 p2 p1
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = p1
XOR R6, R5 //R7 = p1 ^ s1
SRL R3, 1 // R3 = 0 p8 b4 b3  b2 p4 b1 p2
MOV R5, 1 //R5 = 1
AND R5, R3 //R5 = p2
XOR R7, R5 //R7 = p2 ^ s2
SLL R7, 1 //R7 =  p2 ^ s2 0
XOR R7, R6 //R7 = p2 ^ s2 p1 ^ s1
XOR R4, R7 //R4 = s8 ^ p8 s4 ^ p4 p2 ^ s2 p1 ^ s1 = err
//R4 : error, R0: 64, R1:94 (increment), R2:94
// R3, R5, R6, R7 ok
LD R3, R0 //R3 = mem[R0(64)] = p8 b4 b3  b2 p4 b1 p2 p1
MOV R5, 1 //R5 = 1 = 1
SLL R5, 1 //R5 = 10 = 2
SLL R5, 1 //R5 = 100 = 4
SLL R5, 1 //R5 = 1000 = 8
INC R5 //R5 = 9
MOV R6, 1 //R6 = 1
MOV R7, 1 //R7 = 1
LOOP2_2:
BNE R4, R6
JR ELSE2_1
XOR R3, R7
JR ELSE2_4
ELSE2_1:
SLL R7, 1 //R7 = 10...
INC R6 //R6 += 1
BNE R6, R5 (R6 != 9)
JR LOOP2_2
ELSE2_4:
SW R3, R1 //MEM[R1(94)] = NEW p8 b4 b3  b2 p4 b1 p2 p1
INC R0 //R0 = 65
LD R3, R0 //R3 = mem[R0(65)] = 0  b11 b10 b9 b8 b7 b6 b5 
MOV R5, 1 //R5 = 1 = 1
SLL R5, 1 //R5 = 10 = 2
SLL R5, 1 //R5 = 100 = 4
SLL R5, 1 //R5 = 1000 = 8
SLL R5, 1 //R5 = 10000 = 16
MOV R6, 1 //R6 = 1 = 1
SLL R6, 1 //R6 = 10 = 2
SLL R6, 1 //R6 = 100 = 4
SLL R6, 1 //R6 = 1000 = 8
INC R6 //R6 = 9
INC R5 //R5 = 17
MOV R7, 1 //R7 = 1
LOOP2_3:
BNE R4, R6
JR ELSE2_2
XOR R3, R7 //R3 = NEW 0  b11 b10 b9 b8 b7 b6 b5
JR ELSE2_5
ELSE2_2:
SLL R7, 1 //R7 = 10...
INC R6 //R6 += 1
BNE R6, R5 //(R6 != 17)
JR LOOP2_3
ELSE2_5:
MOV R6, 0 //R6 =0
ADD R6, R1 //R6 = 94
INC R6 //R6 = 95
SW R3, R6 // mem[R6(65)] = NEW 0  b11 b10 b9 b8 b7 b6 b5
LD R7, R1 //R7 = NEW p8 b4 b3  b2 p4 b1 p2 p1
SLL R7, 1 //R7 = b4 b3  b2 p4 b1 p2 p1 0
SRL R7, 1 //R7 = 0 b4 b3  b2 p4 b1 p2 p1
SRL R7, 1 //R7 = 0 0 b4 b3  b2 p4 b1 p2
SRL R7, 1 //R7 = 0 0 0 b4 b3  b2 p4 b1
MOV R5, 1 //R5 = 1
AND R5, R7 //R5 = b1
SRL R7, 1 //R7 = 0 0 0 0 b4 b3 b2 p4
SRL R7, 1 //R7 = 0 0 0 0 0 b4 b3  b2
SLL R7, 1 //R7 = 0 0 0 0 b4 b3  b2 0
XOR R7, R5 //R7 = 0 0 0 0 b4 b3  b2 b1
SLL R3, 1 //R3 = b11 b10 b9 b8 b7 b6 b5 0
SLL R3, 1 //R3 = b10 b9 b8 b7 b6 b5 0 0
SLL R3, 1 //R3 = b9 b8 b7 b6 b5 0 0 0
SLL R3, 1 //R3 =b8 b7 b6 b5 0 0 0 0
XOR R3, R7 //R3 = b8 b7 b6 b5 b4 b3  b2 b1
SW R3, R1 //mem[R1(94)] =  b8 b7 b6 b5 b4 b3  b2 b1
INC R1 //R1 = 95
LD R3, R1 //R3 = mem[R1(95)] = 0  b11 b10 b9 b8 b7 b6 b5
SRL R3, 1 //R3 = 0 0  b11 b10 b9 b8 b7 b6
SRL R3, 1 //R3 = 0 0 0 b11 b10 b9 b8 b7
SRL R3, 1 //R3 = 0 0 0 0 b11 b10 b9 b8
SRL R3, 1 //R3 = 0 0 0 0 0 b11 b10 b9
SW R3, R1 //R3 = mem[R1(95)] = 0 0 0 0 0 b11 b10 b9
INC R0 //R0 = 66
INC R1 //R1 = 96
BNE R0, R2 //R0 != 94
JR LOOP2_1

//program 3
//R1 = data, R2 = pattern, R3 = 128, R4 = 160
//R5 = 00001111, R6 = count1, R7 = 192, 193, 194
MOV R3, 1 //R3 = 1
SLL R3, 1 //R3 = 10
SLL R3, 1 //R3 = 100
SLL R3, 1 //R3 = 1000
SLL R3, 1 //R3 = 10000
SLL R3, 1 //R3 = 100000
SLL R3, 1 //R3 = 1000000
SLL R3, 1 //R3 = 10000000 (128)
MOV R4, 1 //R4 = 1
SLL R4, 1 //R4 = 10
SLL R4, 1 //R4 = 100
INC R4 //R4 = 101
SLL R4, 1 //R4 = 1010
SLL R4, 1 //R4 = 10100
SLL R4, 1 //R4 = 101000
SLL R4, 1 //R4 = 1010000
SLL R4, 1 //R4 = 10100000 (160)
LD R2, R4 //R2 = Mem[160] (pattern) (ex: 00001101)
MOV R5, 1 //R5 = 1
SLL R5, 1 //R5 =10
INC R5 // R5 = 11
SLL R5, 1 //R5 =110
INC R5 //R5 = 111
SLL R5, 1 //R5 =1110
INC R5 // R5 = 1111
MOV R6, 0 //R6 = 0
LOOP3_1_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
AND R1, R5 //R1 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_1_1
INC R6 //R6++ (count+1)
ELSE3_1_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
AND R1, R5 //R1 = 00001101
BNE R1, R2 //if R1 != R2
JR ELSE3_1_2
INC R6 //R6++ (count+1)
ELSE3_1_2:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
AND R1, R5 //R1 = 00000110
BNE R1, R2 //if R1 != R2
JR ELSE3_1_3
INC R6 //R6++ (count+1)
ELSE3_1_3:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_1_4
INC R6 //R6++ (count+1)
ELSE3_1_4:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
SRL R1, 1 //R1 = 00001101
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_1_5
INC R6 //R6++ (count+1)
ELSE3_1_5:
INC R3 //R3++
BNE R3, R4 
JR LOOP3_1_1
MOV R7, 1 //R7 = 1
SLL R7, 1 //R7 = 10
INC R7 //R7 = 11
SLL R7, 1 //R7 = 110
SLL R7, 1 //R7 = 1100
SLL R7, 1 //R7 = 11000
SLL R7, 1 //R7 = 110000
SLL R7, 1 //R7 = 1100000
SLL R7, 1 //R7 = 11000000 (192)
SW R6, R7

//R1 = data, R2 = pattern, R3 = 128, R4 = 160
//R5 = 00001111, R6 = count2
MOV R3, 1 //R3 = 1
SLL R3, 1 //R3 = 10
SLL R3, 1 //R3 = 100
SLL R3, 1 //R3 = 1000
SLL R3, 1 //R3 = 10000
SLL R3, 1 //R3 = 100000
SLL R3, 1 //R3 = 1000000
SLL R3, 1 //R3 = 10000000 (128)
LD R2, R4 //R2 = Mem[160] (pattern) (ex: 00001101)
MOV R5, 1 //R5 = 1
SLL R5, 1 //R5 =10
INC R5 // R5 = 11
SLL R5, 1 //R5 =110
INC R5 //R5 = 111
SLL R5, 1 //R5 =1110
INC R5 // R5 = 1111
MOV R6, 0 //R6 = 0
LOOP3_2_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
AND R1, R5 //R1 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_2_1
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_1:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
AND R1, R5 //R1 = 00001101
BNE R1, R2 //if R1 != R2
JR ELSE3_2_2
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_2:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
AND R1, R5 //R1 = 00000110
BNE R1, R2 //if R1 != R2
JR ELSE3_2_3
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_3:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_2_4
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_4:
LD R1, R3 //R1 = Mem[R3] (ex: 11011010)
SRL R1, 1 //R1 = 01101101
SRL R1, 1 //R1 = 00110110
SRL R1, 1 //R1 = 00011011
SRL R1, 1 //R1 = 00001101
AND R1, R5 //R1 = 00001011
BNE R1, R2 //if R1 != R2
JR ELSE3_2_5
INC R6 //R6++ (count+1)
JR END3_2
ELSE3_2_5:
END3_2:
INC R3 //R3++
BNE R3, R4 
JR LOOP3_2_1
INC R7 //(193)
SW R6, R7

//R0 = 1st data, R1 = combine data, R2 = pattern(0101), R3 = 128, R4 = 159
//R5 = 00001111, R6 = count3, R7 = 194
MOV R7, 1 //R7 = 1
SLL R7, 1 //R7 = 10
INC R7 //R7 = 11
SLL R7, 1 //R7 = 110
SLL R7, 1 //R7 = 1100
SLL R7, 1 //R7 = 11000
SLL R7, 1 //R7 = 110000
SLL R7, 1 //R7 = 1100000
SLL R7, 1 //R7 = 11000000 (192)
LD R6, R7 //R6 = Mem[192] = 96
MOV R3, 1 //R3 = 1
SLL R3, 1 //R3 = 10
SLL R3, 1 //R3 = 100
SLL R3, 1 //R3 = 1000
SLL R3, 1 //R3 = 10000
SLL R3, 1 //R3 = 100000
SLL R3, 1 //R3 = 1000000
SLL R3, 1 //R3 = 10000000 (128)
MOV R4, 1 //R4 = 1
SLL R4, 1 //R4 = 10
SLL R4, 1 //R4 = 100
SLL R4, 1 //R4 = 1000
INC R4 //R4 = 1001
SLL R4, 1 //R4 = 10010
INC R4 //R4 = 10011
SLL R4, 1 //R4 = 100110
INC R4 //R4 = 100111
SLL R4, 1 //R4 = 1001110
INC R4 //R4 = 1001111
SLL R4, 1 //R4 = 10011110 
INC R4 //R4 = 10011111 (159)
LOOP3_3_1:
LD R0, R3 //R0 = Mem[128] = 01010101
SRL R0, 1 //R0 = 00101010
SRL R0, 1 //R0 = 00010101
SRL R0, 1 //R0 = 00001010
SRL R0, 1 //R0 = 00000101
SRL R0, 1 //R0 = 00000010
MOV R1, 1 //R1 = 1
ADD R1, R3 //R1 = 129
LD R1, R1 //R1 = Mem[129] = 01010101
SLL R1, 1 //R1 = 10101010
SLL R1, 1 //R1 = 01010100
SLL R1, 1 //R1 = 10101000
ADD R1, R0 //R1 = 10101010
AND R1, R5 //R1 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_3_1
INC R6 //R6++ (count+1)
ELSE3_3_1:
SRL R0, 1 //R0 = 00000001
MOV R1, 1 //R1 = 1
ADD R1, R3 //R1 = 129
LD R1, R1 //R1 = Mem[129] = 01010101
SLL R1, 1 //R1 = 10101010
SLL R1, 1 //R1 = 01010100
ADD R1, R0 //R1 = 01010101
AND R1, R5 //R1 = 00000101
BNE R1, R2 //if R1 != R2
JR ELSE3_3_2
INC R6 //R6++ (count+1)
ELSE3_3_2:
SRL R0, 1 //R0 = 00000000
MOV R1, 1 //R1 = 1
ADD R1, R3 //R1 = 129
LD R1, R1 //R1 = Mem[129] = 01010101
SLL R1, 1 //R1 = 10101010
ADD R1, R0 //R1 = 10101010
AND R1, R5 //R5 = 00001010
BNE R1, R2 //if R1 != R2
JR ELSE3_3_3
INC R6 //R6++ (count+1)
ELSE3_3_3:
INC R3 //R3++
BNE R3, R4 
JR LOOP3_3_1
INC R7 //R7 = 193
INC R7 //R7 = 194
SW R6, R7
HALT